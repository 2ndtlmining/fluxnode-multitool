#!/bin/bash
#const

#color codes
RED='\033[1;31m'
YELLOW='\033[1;33m'
BLUE="\\033[38;5;27m"
SEA="\\033[38;5;49m"
GREEN='\033[1;32m'
CYAN='\033[1;36m'
NC='\033[0m'
ORANGE='\e[38;5;202m'
msg=""
msg2=""
#emoji codes
CHECK_MARK="${GREEN}\xE2\x9C\x94${NC}"
X_MARK="${RED}\xE2\x9C\x96${NC}"
PIN="${RED}\xF0\x9F\x93\x8C${NC}"
BOOK="${RED}\xF0\x9F\x93\x8B${NC}"
WORNING="${RED}\xF0\x9F\x9A\xA8${NC}"
HOT="${ORANGE}\xF0\x9F\x94\xA5${NC}"
CLOCK="${GREEN}\xE2\x8C\x9B${NC}"
ARROW="${SEA}\xE2\x96\xB6${NC}"
all_total_erning="0"
total_erning="0"
total_erning_24h="0"
all_total_erning_24h="0"
total_erning_30d="0"
all_total_erning_30d="0"
cl="0"
sort_by=""
basic_count="0"
super_count="0"
bamf_count="0"

basic_total_erning="0"
basic_total_erning_24h="0"
basic_total_erning_30d="0"

super_total_erning="0"
super_total_erning_24h="0"
super_total_erning_30d="0"

bamf_total_erning="0"
bamf_total_erning_24h="0"
bamf_total_erning_30d="0"

basic_all_total_erning="0"
basic_all_total_erning_24h="0"
basic_all_total_erning_30d="0"

super_all_total_erning="0"
super_all_total_erning_24h="0"
super_all_total_erning_30d="0"

bamf_all_total_erning="0"
bamf_all_total_erning_24h="0"
bamf_all_total_erning_30d="0"



function get_ip_info()
{

ip_output=$(curl -s -m 5 http://ip-api.com/json/$1?fields=status,country,org | jq .)
ip_status=$( jq -r .status <<< "$ip_output")

if [[ "$ip_status" == "success" ]]; then
country=$(jq -r .country <<< "$ip_output")
org=$(jq -r .org <<< "$ip_output")
else
country="UKNOW"
org="UKNOW"
fi

}


function show_time() {
    num=$1
    min=0
    hour=0
    day=0
    if((num>59));then
        ((sec=num%60))
        ((num=num/60))
        if((num>59));then
            ((min=num%60))
            ((num=num/60))
            if((num>23));then
                ((hour=num%24))
                ((day=num/24))
            else
                ((hour=num))
            fi
        else
            ((min=num))
        fi
    else
        ((sec=num))
    fi
}


start=`date +%s`
runtime=$((end-start))


function ip_check(){

zelnode_tier=""
input="$1"



if [[ "$sort_by" == "ip" || "$arg" == "ip_list" || "$arg" == "ip_network_list" || "$single_ip" != "" || "$arg" == "" ]]; then

input_ip="$input"
input_output=$(curl -s http://$(curl -s ifconfig.me):16127/explorer/zelnodetxs/$input | jq -r .data[] | tail -n13)
if [[ "$input_output" == "" ]];then

 echo -e "${PIN}Zelnode: ${RED}NOT_FOUND${NC}"
 echo
 exit

fi
input_height=$(jq -r .height <<< "$input_output")
input_address=$(jq -r .zelAddress <<< "$input_output")
input_txhash=$(jq -r .collateralHash <<< "$input_output")


zeladdress_output=$(curl -s http://$(curl -s ifconfig.me):16127/explorer/zelnodetxs/$input_address | jq -r .data[] | tail -n13)
zeladdress_height=$(jq -r .height <<< "$zeladdress_output")
zeladdress_ip=$(jq -r .ip <<< "$zeladdress_output")
zeladdress_txhash=$(jq -r .collateralHash <<< "$zeladdress_output")


if [[ "$input_txhash" == "$zeladdress_txhash" ]]; then
  zelnodetxs_output="$zeladdress_output"
else
  input_txhash_output=$(curl -s http://$(curl -s ifconfig.me):16127/explorer/zelnodetxs/$input_txhash | jq -r .data[] | tail -n13)
  input_txhash_hight=$(jq -r .height <<< "$input_txhash_output")

  input_zeladdress_txhash=$(curl -s http://$(curl -s ifconfig.me):16127/explorer/zelnodetxs/$zeladdress_txhash | jq -r .data[] | tail -n13)
  input_zeladdress_hight=$(jq -r .height <<< "$input_zeladdress_txhash")

  if [[ "$input_txhash_hight" -gt "input_zeladdress_hight" ]]; then
  zelnodetxs_output="$input_txhash_output"
  else
  zelnodetxs_output="$input_zeladdress_txhash"
  fi

fi

elif [[ "$sort_by" == "address" ]]; then

input_output=$(curl -s http://$(curl -s ifconfig.me):16127/explorer/zelnodetxs/$input | jq -r .data[] | tail -n13)


if [[ "$input_output" == "" ]];then

 echo -e "${PIN}Zelnode: ${RED}NOT_FOUND${NC}"
 echo
 exit

fi


input_height=$(jq -r .height <<< "$input_output")
input_ip=$(jq -r .ip <<< "$input_output")
input_txhash=$(jq -r .collateralHash <<< "$input_output")

collateral_output=$(curl -s http://$(curl -s ifconfig.me):16127/explorer/zelnodetxs/$input_txhash | jq -r .data[] | tail -n13)
collateral_height=$(jq -r .height <<< "$collateral_output")
collateral_ip=$(jq -r .ip <<< "$collateral_output")


if [[ "$input_height" == "$collateral_height" ]]; then
  zelnodetxs_output="$input_output"
else


  if [[ "input_height" -gt "collateral_height" ]]; then
  zelnodetxs_output="$input_output"
  else
  zelnodetxs_output="collateral_output"
  fi

fi



elif [[ "$sort_by" == "txhash" ]]; then

input_output=$(curl -s http://$(curl -s ifconfig.me):16127/explorer/zelnodetxs/$input | jq -r .data[] | tail -n13)


if [[ "$input_output" == "" ]];then

 echo -e "${PIN}Zelnode: ${RED}NOT_FOUND${NC}"
 echo
 exit

fi

input_height=$(jq -r .height <<< "$input_output")
input_ip=$(jq -r .ip <<< "$input_output")
input_address=$(jq -r .zelAddress <<< "$input_output")

zeladdress_output=$(curl -s http://$(curl -s ifconfig.me):16127/explorer/zelnodetxs/$input_address | jq -r .data[] | tail -n13)
zeladdress_height=$(jq -r .height <<< "$zeladdress_output")
zeladdress_ip=$(jq -r .ip <<< "$zeladdress_output")
zeladdress_txhash=$(jq -r .collateralHash <<< "$zeladdress_output")

if [[ "$input_height" == "$zeladdress_height" ]]; then
  zelnodetxs_output="$input_output"
else

  if [[ "input_height" -gt "zeladdress_height" ]]; then
  zelnodetxs_output="$input_output"
  else
  zelnodetxs_output="$zeladdress_output"
  fi

fi


fi

collateral_hash_output="$zelnodetxs_output"

 if [[ "$collateral_hash_output" == "" ]]; then

  echo -e "${PIN}Zelnode: ${RED}NOT_FOUND${NC}"
  echo
  exit

 fi


#collateral_hash=$(jq -r .collateralHash <<< "$collateral_hash_output")
#collateral_index=$(jq -r .collateralIndex <<< "$collateral_hash_output")
#check_hash_ip_output=$(curl -s http://$(curl -s ifconfig.me):16127/explorer/zelnodetxs/$collateral_hash | jq -r .data[] | tail -n13)
#check_hash_ip=$(jq -r .collateralHash <<< "$check_hash_ip_output")
#check_hash_ip_index=$(jq -r .collateralIndex <<< "$check_hash_ip_output")



#check_address=$(curl -s http://$(curl -s ifconfig.me):16127/explorer/zelnodetxs/$address | jq -r .data[] | tail -n13)




#if [[ "$collateral_hash" == "$check_hash_ip" && "$collateral_index" == "$check_hash_ip_index" ]]; then
#input="$collateral_hash"
#else
#input="$1"
#fi



#zelnodetxs_output=$(curl -s http://$(curl -s ifconfig.me):16127/explorer/zelnodetxs/$input | jq -r .)
zelnode_ip=$((jq -r .ip | egrep -o '([0-9]{1,3}[\.]){3}[0-9]{1,3}' | tail -n1) <<< "$zelnodetxs_output" )

if [[ "$zelode_ip" == "" && "$sort_by" == "ip" ]]; then
zelnode_ip="$input_ip"
fi

if [[ "$zelnode_ip" == "" ]]; then
adress=$((jq -r .zelAddress | tail -n1) <<< "$zelnodetxs_output" )
zelnode_ip=$(curl -s http://$(curl -s ifconfig.me):16127/explorer/zelnodetxs/$adress | jq -r .data[].ip | egrep -o '([0-9]{1,3}[\.]){3}[0-9]{1,3}' | tail -n1)
fi

last_input_hight=$((jq -r .height | tail -n1) <<< "$zelnodetxs_output" )
blocks_hight=$(zelcash-cli getinfo | jq .blocks)
block_from_input=$((blocks_hight-last_input_hight))
status_type=$((jq -r .type | tail -n1) <<< "$zelnodetxs_output" )
locked_amount=$((jq -r .lockedAmount | tail -n1 | awk '{print ($1*0.00000001)}') <<< "$zelnodetxs_output" )
expired_check=$((jq -r '.collateralHash,.collateralIndex' | xargs) <<< "$zelnodetxs_output" )
payment_address=$((jq -r .zelAddress | tail -n1) <<< "$zelnodetxs_output" )
expired_in=$((last_input_hight+180-blocks_hight))

#zelnode_ip=$(curl -s http://$(curl -s ifconfig.me):16127/explorer/zelnodetxs/$input | jq -r .data[].ip | egrep -o '([0-9]{1,3}[\.]){3}[0-9]{1,3}' | tail -n1)
#last_input_hight=$(curl -s http://$(curl -s ifconfig.me):16127/explorer/zelnodetxs/$input | jq .data[].height | tail -n1)
#blocks_hight=$(zelcash-cli getinfo | jq .blocks)
#block_from_input=$((blocks_hight-last_input_hight))
#status_type=$(curl -s http://$(curl -s ifconfig.me):16127/explorer/zelnodetxs/$input | jq -r .data[].type | tail -n1)
#locked_amount=$(curl -s http://$(curl -s ifconfig.me):16127/explorer/zelnodetxs/$input | jq -r .data[].lockedAmount | tail -n1 | awk '{print ($1*0.00000001)}')
#expired_check=$(curl -s http://$(curl -s ifconfig.me):16127/explorer/zelnodetxs/$input | jq  '.data[]' | tail -n13 | jq -r '.collateralHash,.collateralIndex' | xargs)

cmd1=$(awk '{print $1}' <<< "$expired_check" )
cmd2=$(awk '{print $2}' <<< "$expired_check" )
expired_check_out=$(zelcash-cli gettxout "$cmd1" "$cmd2" | jq .value)



  case $locked_amount in
         "10000")  zelnode_tier="${GREEN}BASIC${NC}"
type_paid="1"
single_paid="5.625"
basic_count=$(($basic_count+1))
 ;;
         "25000")  zelnode_tier="${GREEN}SUPER${NC}"
type_paid="2"
single_paid="9.375"
super_count=$(($super_count+1))
 ;;
         "100000") zelnode_tier="${GREEN}BAMF${NC}"
type_paid="3"
single_paid="22.500"
bamf_count=$(($bamf_count+1))
 ;;
  esac


  if [[ "$zelnode_tier" == "" ]]; then
      zelnode_tier="UKNOW"
  fi

line="$zelnode_ip"
if [[ "$arg" == "getzelnodestatus" ]];then
zelid_output=$(curl -s -m 10 http://$line:16127/zelflux/zelid | jq -r .status,.data | xargs)
zelid_status=$( awk '{print $1}' <<< "$zelid_output")

if [[ "$zelid_status" == "success" ]]; then
zelflux_zelid_getstatus=$( awk '{print $2}' <<< "$zelid_output")
fi
zelflux_zelid="N/A"
else
zelflux_zelid=$(curl -s -m 5 http://"$line":16127/zelflux/zelid | jq -r .data)
fi


if [[ "$expired_check_out" != "" ]]; then

  if [[ "$status_type" == "Starting a zelnode" &&  "$block_from_input" -lt "60" ]];then

   if [[ "$zelflux_zelid" == "N/A" ]]; then
    zelnode_status="${YELLOW}STARTED ${NC}Address: ${ORANGE}$payment_address ${NC}DOS_IN: ${RED}$((60-$block_from_input)) ${NC}Time left: ${ORANGE}~$(((60-$block_from_input)*2)) min.${NC} "
   else
    zelnode_status="${YELLOW}STARTED ${NC}DOS_IN: ${RED}$((60-$block_from_input)) ${NC}Time left: ${ORANGE}~$(((60-$block_from_input)*2)) min.${NC} "
   fi

  elif [[ "$status_type" == "Starting a zelnode" &&  "$block_from_input" -gt "59" && "$block_from_input" -lt "180" ]]; then

    if [[ "$zelflux_zelid" == "N/A" ]]; then
     zelnode_status="${RED}DOS ${NC}Address: ${ORANGE}$payment_address ${NC}Till: ${ORANGE}$((last_input_hight+180)) ${NC}EXPIRE_COUNT: ${ORANGE}$expired_in${NC} Time left: ${RED}~$((2*(180-block_from_input))) min. "
    else
     zelnode_status="${RED}DOS ${NC}Till: ${ORANGE}$((last_input_hight+180)) ${NC}EXPIRE_COUNT: ${ORANGE}$expired_in${NC} Time left: ${RED}~$((2*(180-block_from_input))) min. "
    fi

 elif [[ "$status_type" == "Confirming a zelnode" &&  "$block_from_input" -le "60" ]]; then

    activesince=$(zelcash-cli viewdeterministiczelnodelist $1 | jq -r .[0].activesince)

     if [[ "$activesince" != "" ]]; then
       data_now=$(date)
       epotch_now=$(date -d "$data_now" +"%s")
       uptime_secend=$((epotch_now-activesince))
       show_time uptime_secend

        if [[ "$zelflux_zelid" == "N/A" ]]; then
         zelnode_status="${GREEN}CONFIRMED ${NC}Address: ${ORANGE}$payment_address ${NC}"
        else
         zelnode_status="${GREEN}CONFIRMED${NC} "
        fi

     else

        if [[ "$zelflux_zelid" != "N/A" ]]; then
          zelnode_status="${ORANGE}EXPIRED${NC} "
        else
         zelnode_status="${ORANGE}EXPIRED${NC} Address: ${ORANGE}$payment_address ${NC}"
        fi

     fi

  else

     if [[ "$zelflux_zelid" != "N/A" ]]; then
      zelnode_status="${ORANGE}EXPIRED${NC} "
     else
      zelnode_status="${ORANGE}EXPIRED${NC} Address: ${ORANGE}$payment_address ${NC}"
     fi

  fi

else

  if [[ "$zelflux_zelid" != "N/A" ]]; then
      zelnode_status="${ORANGE}PAYOUT${NC} "
  else
      zelnode_status="${ORANGE}PAYOUT${NC} Address: ${ORANGE}$payment_address ${NC}"
  fi

fi

}

function get_ip()
{
adress=""
single_ip=$(egrep -o '([0-9]{1,3}[\.]){3}[0-9]{1,3}' <<< "$1")

if [[ "$single_ip" == "" ]]; then
zelnode_ip=$(curl -s -m 5 http://$(curl -s ifconfig.me):16127/explorer/zelnodetxs/$1 | jq -r .data[].ip | egrep -o '([0-9]{1,3}[\.]){3}[0-9]{1,3}' | tail -n1)
adress="$1"
else
zelnode_ip="$1"
adress=$(curl -s http://$(curl -s ifconfig.me):16127/explorer/zelnodetxs/$zelnode_ip | jq -r .data[].zelAddress | tail -n1)
fi

if [[ "$adress" == "" ]]; then
echo -e "${PIN}Zelnode: ${ORANGE}NOT_FOUND${NC}"
echo
exit
fi


if [[ "$zelnode_ip" == "" ]];then
zelnode_ip="${ORANGE}N/A${NC}"
fi

}


function check() {

# clear variable
relocation=""
zelnode_tier=""
zelflux_zelid=""
activesince=""
zelnode_status=""
zelnode_zelbench_version=""
zelnode_benchmarking=""
zelnode_zelflux_version=""
zelnode_zelflux_DOS=""
error_log=""

if [[ "$line" == "null" ]]; then
return
fi

#if [[ "$line" != "" && "$line" != "167.86.71.144" ]]; then

if [[ "$line" != "" ]]; then

old_ip="$line"

ip_check "$line"
line="$zelnode_ip"


zelflux_info=$(wget --timeout=60 --tries=1 http://"$line":16127/zelflux/info -O - -q )
status=$(jq -r '.status' <<< "$zelflux_info")



if [[ "$status" == "error" ]]; then
error_log=$((jq -r '.data.name,.data.message' | xargs) <<< "$zelflux_info")
#zelflux_info=""
fi



if [[ "$status" == "" ]]; then


   expired_in=$((61-block_from_input))

   msg="${PIN}Zelnode IP: $line Tier:${RED} $zelnode_tier${NC} Status: ${CYAN}$zelnode_status${NC}Zelflux:${RED} OFFLINE ${NC}"

   if [[ "$activesince" != "" ]]; then
     msg+="${NC}EXPIRE_COUNT: ${YELLOW}$expired_in${NC}"
   else



if [[ "block_from_input" -lt "0" ]]; then

msg+=""

else

if ! [[ $((grep -o 'DOS') <<< "$zelnode_status") ||  $((grep -o 'STARTED') <<< "$zelnode_status") ]]; then
   last_time=$(zelcash-cli getblock $((last_input_hight+60)) | jq -r .time)
   data_now=$(date)
   epotch_now=$(date -d "$data_now" +"%s")
   uptime_secend=$((epotch_now-last_time))
   show_time uptime_secend

     msg+="IN_EXPIRE: ${ORANGE}$((expired_in*-1))${NC} Inactive:${ORANGE} ${day}d ${hour}h ${min}m ${sec}s${NC}"

else
msg +=""
fi
   fi
fi
# cl=$[cl+1]
 return

fi



  if [[ "$zelflux_info" != "" ]]; then

    status=$(jq -r '.status' <<< "$zelflux_info")
    if [[ "$status" == "success" ]]; then

     zelflux_zelid=$(jq -r '.data.zelflux.zelid' <<< "$zelflux_info")
     if [[ "$zelflux_zelid" == "" ]]; then
      zelflux_zelid="N/A"
     fi

     activesince=$(jq -r '.data.zelnode.status.activesince' <<< "$zelflux_info")
     zelnode_zelbench_version=$(jq -r '.data.zelbench.info.version' <<< "$zelflux_info")
     zelnode_benchmarking=$(jq -r '.data.zelbench.status.benchmarking' <<< "$zelflux_info")
     zelnode_zelflux_version=$(jq -r '.data.zelflux.version' <<< "$zelflux_info")
     zelnode_zelflux_DOS=$(jq -r '.data.zelflux.dos.dosState' <<< "$zelflux_info")

  else


     zelbench_getstatus=$(curl -s -m 5 http://"$line":16127/zelbench/getstatus | jq -r .)
     status=$(jq -r '.status' <<< "$zelbench_getstatus")

     if [[ "$status" == "success" ]]; then
        zelnode_benchmarking=$(jq -r '.data.benchmarking' <<< "$zelbench_getstatus")
        zelnode_zelbench_version=$(curl -s -m 5 http://"$line":16127/zelbench/getinfo | jq -r .data.version)
     else
        zelnode_benchmarking="DISABLED"
        zelnode_zelbench_version="UKNOW"
     fi

       zelflux_zelid=$(curl -s -m 5 http://"$line":16127/zelflux/zelid | jq -r .)
       status=$(jq -r '.status' <<< "$zelflux_zelid")
       if [[ "$status" == "success" ]]; then
        zelflux_zelid=$(jq -r '.data' <<< "$zelflux_zelid")
         if [[ zelflux_zelid == "" ]]; then
           zelnode_zelid="N/A"
         fi
           zelnode_zelflux_DOS=$(curl -s -m 5 http://"$line":16127/zelflux/dosstate | jq -r .data.dosState)
           zelnode_zelflux_version=$(curl -s -m 5 http://"$line":16127/zelflux/version | jq -r .data)
         fi
     fi
fi


 if [[ "$activesince" != "" || "$activesince" != "null" ]]; then
   data_now=$(date)
   epotch_now=$(date -d "$data_now" +"%s")
   uptime_secend=$((epotch_now-activesince))
   show_time uptime_secend
   expired_in=$((61-block_from_input))
 fi




if [[ "$sort_by" == "zelid" ]]; then
msg="${PIN}Zelnode IP: $line Tier:${RED} $zelnode_tier${NC} Status: ${CYAN}$zelnode_status${NC}Benchmark: ${CYAN}$zelnode_benchmarking${NC} dosState: ${CYAN}$zelnode_zelflux_DOS${NC} Zelflux: ${GREEN}$zelnode_zelflux_version${NC} Zelbench: ${GREEN}$zelnode_zelbench_version${NC} Address: ${ORANGE}$payment_address ${NC}"
msg+="${NC}EXPIRE_COUNT: ${YELLOW}$expired_in${NC} "
else
msg="${PIN}Zelnode IP: $line Tier:${RED} $zelnode_tier${NC} Status: ${CYAN}$zelnode_status${NC}Benchmark: ${CYAN}$zelnode_benchmarking${NC} dosState: ${CYAN}$zelnode_zelflux_DOS${NC} Zelflux: ${GREEN}$zelnode_zelflux_version${NC} Zelbench: ${GREEN}$zelnode_zelbench_version${NC} ZELID: ${RED}$zelflux_zelid${NC} "

if ! [[ $((grep -o 'DOS') <<< "$zelnode_status") ||  $((grep -o 'STARTED') <<< "$zelnode_status") ||  $((grep -o 'EXPIRED') <<< "$zelnode_status") ||  $((grep -o 'PAYOUT') <<< "$zelnode_status") ]]; then
  #echo -en "Last paid:${GREEN} ${day}d ${hour}h ${min}m ${sec} ${CYAN}($last_paid_time)${NC} "
msg+="EXPIRE_COUNT: ${ORANGE}$expired_in${NC} "
else



if [[ $((grep -o 'EXPIRED') <<< "$zelnode_status") || $((grep -o 'PAYOUT') <<< "$zelnode_status") ]]; then


if [[ "$block_from_input" -lt "0" ]]; then

msg+=""

else

if ! [[ $((grep -o 'DOS') <<< "$zelnode_status") ||  $((grep -o 'STARTED') <<< "$zelnode_status") ]]; then

   last_time=$(zelcash-cli getblock $((last_input_hight+60)) | jq -r .time)
   data_now=$(date)
   epotch_now=$(date -d "$data_now" +"%s")
   uptime_secend=$((epotch_now-last_time))
   show_time uptime_secend
   msg+="IN_EXPIRE: ${ORANGE}$((expired_in*-1))${NC} Inactive:${ORANGE} ${day}d ${hour}h ${min}m ${sec}s${NC}"

fi


fi
fi
fi

#echo -en "${NC} EXPIRE_COUNT: ${YELLOW}$expired_in${NC} "
fi


   if ! [[ "$activesince" == "" || "$activesince" == "null" ]]; then
   msg+="${NC}Active:${GREEN} ${day}d ${hour}h ${min}m ${sec}s ${NC}"
   else
   msg+=""
   fi

if [[ "$error_log" != "" ]]; then

related=""
if grep '16124' <<< "$error_log" > /dev/null 2>&1 || grep 'Invalid' <<< "$error_log" > /dev/null 2>&1 || grep 'block' <<< "$error_log" > /dev/null 2>&1 || grep 'chain' <<< "$error_log" > /dev/null 2>&1; then
related="${NC}Warning: ${RED}Problem with Zelcash Daemon"
elif grep '16224' <<< "$error_log" > /dev/null 2>&1  ; then
related="${NC}Warning: ${RED}Problem with Zelbench"
elif grep '27017' <<< "$error_log" > /dev/null 2>&1 || grep 'Mongo' <<< "$error_log" > /dev/null 2>&1; then
related="${NC}Warning: ${RED}Problem with MongoDB"
fi
msg2="${WORNING}Error: ${SEA}$error_log $related${NC}"
fi

#cl=$[cl+1]

fi

}

function nodemsg()
{

case $# in
  "0")

echo -e "$msg"
if [[ "$msg2" != "" ]]; then
echo -e "$msg2"
fi
msg=""
msg2=""
cl=$[cl+1]


 ;;
  "1")

if [[ $((grep -o $1) <<< "$msg") ]]; then

echo -e "$msg"
if [[ "$msg2" != "" ]]; then
echo -e "$msg2"
fi
msg=""
msg2=""
cl=$[cl+1]

elif  [[ $((grep -o $1) <<< "$msg") && "$msg2" != "" ]]; then

echo -e "$msg"
if [[ "$msg2" != "" ]]; then
echo -e "$msg2"
fi
msg=""
msg2=""

fi


;;
  "2")

if [[ $((grep -o $1) <<< "$msg") && $((grep -o $2) <<< "$msg") ]]; then

echo -e "$msg"
if [[ "$msg2" != "" ]]; then
echo -e "$msg2"
fi
msg=""
msg2=""
cl=$[cl+1]

elif  [[ $((grep -o $1) <<< "$msg")  && $((grep -o $2) <<< "$msg") && "$msg2" != "" ]]; then

echo -e "$msg"
if [[ "$msg2" != "" ]]; then
echo -e "$msg2"
fi
msg=""
msg2=""
cl=$[cl+1]
fi



 ;;
  "3")



;;
  "4")



;;

esac


}


if [[ "$1" == "-f" ]];then
filter1=$2
filter2=$3
filter3=$4
filter4=$5
elif [[ "$2" == "-f" ]];then
filter1=$3
filter2=$4
filter3=$5
filter4=$6
elif [[ "$3" == "-f" ]]; then
filter1=$4
filter2=$5
filter3=$6
filter4=$7
fi



arg="$1"
type="$2"

if [[ "$arg" == "help" ]]; then
echo -e "${CYAN}ZelnodeChecker v1.5 by X4MiLX"
echo -e "${CYAN}Usage: ${NC}"
echo -e "${PIN}${SEA}$0 ${ORANGE}create_network_ip_list${NC} - Create json file with ip of all confirmed zelnode"
echo -e "${PIN}${SEA}$0 ${ORANGE}create_ip_list <ZELID>${NC} - Create json file with ip of all confirmed zelnode linked to zelid"
echo -e "${PIN}${SEA}$0 ${ORANGE}<ip_adress> [option: info ]${NC} - Checking single zelnode by IP"
echo -e "${PIN}${SEA}$0 ${ORANGE}<ZELID> [option: info ]${NC} - Checking all confirmed node linked to zelid"
echo -e "${PIN}${SEA}$0 ${ORANGE}ip_list [option: info ]${NC} - Checking zelnode list from ~/ip_list.json"
echo -e "${PIN}${SEA}$0 ${ORANGE}ip_network_list [option: info ]${NC} - Checking zelnode list from ~/ip_network_list.json"
echo
exit
fi

if [[ "$arg" == "getzelnodestatus" ]]; then

single_ip=$(egrep -o '([0-9]{1,3}[\.]){3}[0-9]{1,3}' <<< "$2")

if [[ ${#2} > 24 && ${#2} < 35 ]]; then
sort_by="zelid"
#echo -e "${CLOCK}Checking node by zelid:${GREEN} $1${NC}"
fi


if [[ "$single_ip" != "" ]] ; then
sort_by="ip"
#echo -e "${CLOCK}Checking node by ip:${GREEN} $1${NC}"
fi

if [[ ${#2} == "35" ]];then
sort_by="address"
#echo -e "${CLOCK}Checking node by zel address:${GREEN} $1${NC}"
fi


if [[ ${#2} -gt "40" ]];then
sort_by="txhash"
#echo -e "${CLOCK}Checking node by txhash:${GREEN} $1${NC}"
fi

else

single_ip=$(egrep -o '([0-9]{1,3}[\.]){3}[0-9]{1,3}' <<< "$1")

if [[ ${#2} > 24 && ${#2} < 35 ]]; then
sort_by="zelid"
#echo -e "${CLOCK}Checking node by zelid:${GREEN} $2${NC}"
fi


if [[ "$single_ip" != "" ]] ; then
sort_by="ip"
#echo -e "${CLOCK}Checking node by ip:${GREEN} $1${NC}"
fi

if [[ ${#1} == "35" ]];then
sort_by="address"
#echo -e "${CLOCK}Checking node by zel address:${GREEN} $1${NC}"
fi


if [[ ${#1} -gt "40" ]];then
sort_by="txhash"
#echo -e "${CLOCK}Checking node by txhash:${GREEN} $1${NC}"
fi



fi





if [[ ("$1" == "getzelnodestatus" && "$2" == "ip_list") || ("$1" == "getzelnodestatus" && "$2" == "ip_network_list") ]]; then

if [[ "$2" == "ip_list" ]]; then

filename="ip_list.json"

  if ! [[ -f ~/ip_list.json ]]; then
   echo -e "${BOOK}${CYAN}Create first ${GREEN}~/ip_list.json${CYAN} file.${NC}"
   echo
   exit
  fi

elif [[ "$2" == "ip_network_list" ]]; then

filename="ip_network_list.json"

 if ! [[ -f ~/ip_network_list.json ]]; then
   echo -e "${BOOK}${CYAN}Create first ${GREEN}~/ip_network_list.json${CYAN} file.${NC}"
   echo
   exit
 fi

fi

  echo
  jq -r .[] "$filename" | { while read line
  do

 sort_by="ip"

if [[ "$arg" == "getzelnodestatus" && "$2" != "" ]]; then

ip_check $line

if [[ "$zelnode_ip" != "" ]]; then

get_ip_info $zelnode_ip
utxo_output=$(curl -s -m 5 http://$(curl -s ifconfig.me):16127/explorer/utxo/$payment_address | jq -r .)
#total_paid_count=$((jq -r .data[].satoshis | awk '{print $1*0.00000001}' | wc -l | awk '{print $1-1}')  <<< "$utxo_output")

#if [[ "$total_paid_count" == "0" ]]; then
#total_paid="0"
#last_paid_hight=""
#else
#total_paid=$((jq -r .data[].satoshis | awk '{print $1*0.00000001}' | egrep -w '5.625|9.375|22.5' | awk '{s+=$1} END {print s}') <<< "$utxo_output")
total_paid_reactived=$( curl -s -m 5 https://explorer.zel.zelcore.io/api/addr/$payment_address?noTxList=1 | jq -r .balance | awk '{print $1}' )
total_paid=$(awk "BEGIN {printf \"%.2f\n\", $total_paid_reactived-$locked_amount}")

min=0
max=50
stop=""
now_date=$(date +%s)
date_24h=$(($now_date-86400))
date_30d=$(($now_date-(31*86400)))


#86400
   while [ "$stop" != "1" ];
    do
  erning_output=$(curl -s -m 5 https://explorer.zel.zelcore.io/api/addrs/$payment_address/txs?from=$min'&'to=$max | jq .)
  erning=$((jq -r .items[].vout[].value | egrep -o $single_paid | awk '{s+=$1} END {print s}') <<< "$erning_output" )
  erning_24h=$((jq -r ".items[] | .time,.vout[$type_paid].value" | paste - - | awk -v a="$date_24h" '{ if ($1 > a) sum+=$2; print(sum) }' | tail -n1) <<< "$erning_output" )
  erning_30d=$((jq -r ".items[] | .time,.vout[$type_paid].value" | paste - - | awk -v a="$date_30d" '{ if ($1 > a) sum+=$2; print(sum) }' | tail -n1) <<< "$erning_output" )

 if [[ "$erning" == "" ]]; then

  min=0
  max=50
  stop="1"

 else


if [[ "$type_paid" == "1" ]]; then
basic_total_erning=$(awk "BEGIN {printf \"%.3f\n\", $basic_total_erning+$erning }" | grep -o '.*[1-9]')


if  [[ "$erning_24h" != "" ]]; then
  basic_total_erning_24h=$(awk "BEGIN {printf \"%.3f\n\", $basic_total_erning_24h+$erning_24h}" | grep -o '.*[1-9]')
fi

if  [[ "$erning_30d" != "" ]]; then
  basic_total_erning_30d=$(awk "BEGIN {printf \"%.3f\n\", $basic_total_erning_30d+$erning_30d}" | grep -o '.*[1-9]')
fi



elif [[ "$type_paid" == "2" ]]; then

super_total_erning=$(awk "BEGIN {printf \"%.3f\n\", $super_total_erning+$erning }" | grep -o '.*[1-9]')


if  [[ "$erning_24h" != "" ]]; then
  super_total_erning_24h=$(awk "BEGIN {printf \"%.3f\n\", $super_total_erning_24h+$erning_24h}" | grep -o '.*[1-9]')
fi

if  [[ "$erning_30d" != "" ]]; then
  super_total_erning_30d=$(awk "BEGIN {printf \"%.3f\n\", $super_total_erning_30d+$erning_30d}" | grep -o '.*[1-9]')
fi


elif [[ "$type_paid" == "3" ]]; then

bamf_total_erning=$(awk "BEGIN {printf \"%.3f\n\", $bamf_total_erning+$erning }" | grep -o '.*[1-9]')

if  [[ "$erning_24h" != "" ]]; then
  bamf_total_erning_24h=$(awk "BEGIN {printf \"%.3f\n\", $bamf_total_erning_24h+$erning_24h}" | grep -o '.*[1-9]')
fi

if  [[ "$erning_30d" != "" ]]; then
  bamf_total_erning_30d=$(awk "BEGIN {printf \"%.3f\n\", $bamf_total_erning_30d+$erning_30d}")
fi


fi


  total_erning=$(awk "BEGIN {printf \"%.3f\n\", $total_erning+$erning }" | grep -o '.*[1-9]')

if  [[ "$erning_24h" != "" ]]; then
  total_erning_24h=$(awk "BEGIN {printf \"%.3f\n\", $total_erning_24h+$erning_24h}" | grep -o '.*[1-9]')
fi

if  [[ "$erning_30d" != "" ]]; then
  total_erning_30d=$(awk "BEGIN {printf \"%.3f\n\", $total_erning_30d+$erning_30d}" | grep -o '.*[1-9]')
fi


  min=$((min+50))
  max=$((max+50))

 fi


    done

last_paid_hight=$((jq -r .data[].height | tail -n1) <<< "$utxo_output")
#fi

  if [[ "$last_paid_hight" != "" ]]; then
   last_paid_time=$(zelcash-cli getblock $last_paid_hight | jq -r .time)
  else
   last_paid_time="N/A"
  fi


  expired_in=$((61-block_from_input))
  echo -e " ${ARROW} IP: $zelnode_ip ${NC}"

 ip_info_msg=" ${ARROW} Country: ${ORANGE}$country ${NC}"

 if [[ "$org" != "" ]]; then
  ip_info_msg+="ISP: ${YELLOW}$org ${NC}"
 fi

  echo -e "$ip_info_msg"
  echo -e " ${ARROW} Tier:${SEA} $zelnode_tier${NC}"
  echo -e " ${ARROW} Status: $zelnode_status${NC}"

real_rank=$(zelcash-cli viewdeterministiczelnodelist | jq -r '.[] | .ip,.rank,.tier' | paste - - - | egrep -w $zelnode_ip | awk '{print $2}')
echo -e " ${ARROW} Rank: ${ORANGE}$real_rank${NC} Next payment: ${GREEN}~$(($real_rank*2)) ${NC}min."
if ! [[ $((grep -o 'DOS') <<< "$zelnode_status") ||  $((grep -o 'STARTED') <<< "$zelnode_status") ||  $((grep -o 'EXPIRED') <<< "$zelnode_status") || $((grep -o 'PAYOUT') <<< "$zelnode_status") ]]; then


  if [[ "$last_paid_time" != "N/A" ]]; then

    data_now=$(date)
    epotch_now=$(date -d "$data_now" +"%s")
    uptime_secend=$((epotch_now-last_paid_time))
    show_time uptime_secend


    echo -e " ${ARROW} Last paid:${GREEN} $day"d "$hour"h "$min"m "$sec"s"${NC} epoch_time: ${RED}$last_paid_time${NC}"
    echo -e " ${ARROW} Balance:${ORANGE} $total_paid ${NC}"
    echo -e " ${ARROW} Earnings:${ORANGE} $total_erning ${NC}Last 31d: ${ORANGE}$total_erning_30d ${NC}Last 24h: ${ORANGE}$total_erning_24h${NC}"
   all_total_erning=$(awk "BEGIN {printf \"%.3f\n\", $total_erning+$all_total_erning }" | grep -o '.*[1-9]')
   all_total_erning_24h=$(awk "BEGIN {printf \"%.3f\n\", $total_erning_24h+$all_total_erning_24h }" | grep -o '.*[1-9]')
   all_total_erning_30d=$(awk "BEGIN {printf \"%.3f\n\", $total_erning_30d+$all_total_erning_30d }" | grep -o '.*[1-9]')

   basic_all_total_erning=$(awk "BEGIN {printf \"%.3f\n\", $basic_total_erning+$basic_all_total_erning }" | grep -o '.*[1-9]')
   basic_all_total_erning_24h=$(awk "BEGIN {printf \"%.3f\n\", $basic_total_erning_24h+$basic_all_total_erning_24h }" | grep -o '.*[1-9]')
   basic_all_total_erning_30d=$(awk "BEGIN {printf \"%.3f\n\", $basic_total_erning_30d+$basic_all_total_erning_30d }" | grep -o '.*[1-9]')

   super_all_total_erning=$(awk "BEGIN {printf \"%.3f\n\", $super_total_erning+$super_all_total_erning }" | grep -o '.*[1-9]')
   super_all_total_erning_24h=$(awk "BEGIN {printf \"%.3f\n\", $super_total_erning_24h+$super_all_total_erning_24h }" | grep -o '.*[1-9]')
   super_all_total_erning_30d=$(awk "BEGIN {printf \"%.3f\n\", $super_total_erning_30d+$super_all_total_erning_30d }" | grep -o '.*[1-9]')

   bamf_all_total_erning=$(awk "BEGIN {printf \"%.3f\n\", $bamf_total_erning+$bamf_all_total_erning }" | grep -o '.*[1-9]'")
   bamf_all_total_erning_24h=$(awk "BEGIN {printf \"%.3f\n\", $bamf_total_erning_24h+$bamf_all_total_erning_24h }" | grep -o '.*[1-9]')
   bamf_all_total_erning_30d=$(awk "BEGIN {printf \"%.3f\n\", $bamf_total_erning_30d+$bamf_all_total_erning_30d }" | grep -o '.*[1-9]')


#echo "  Earning till: $all_total_erning"
   total_erning="0"
   total_erning_24h="0"
   total_erning_30d="0"

   basic_total_erning="0"
   basic_total_erning_24h="0"
   basic_total_erning_30d="0"

   super_total_erning="0"
   super_total_erning_24h="0"
   super_total_erning_30d="0"

   bamf_total_erning="0"
   bamf_total_erning_24h="0"
   bamf_total_erning_30d="0"

   #node_total_paid=$((node_total_paid+total_paid))
   #node_total_paid=$(https://explorer.zel.zelcore.io/api/addr/$payment_address?noTxList=1 | jq -r .totalReceived | awk "BEGIN {print $1-$locked_amount; exit}" )
 #  node_total_paid=`echo $node_total_paid + $total_paid | bc`

  node_total_paid=$(awk "BEGIN {printf \"%.3f\n\", $node_total_paid+$total_paid}")

  else
   echo -e " ${ARROW} Last paid:${ORANGE} $last_paid_time${NC}"
  fi



 # echo -en " ${ARROW} Last paid:${GREEN} ${day}d ${hour}h ${min}m ${sec} ${CYAN}($last_paid_time)${NC} "

echo -e " ${ARROW} Expire count: ${ORANGE}$expired_in${NC} last_confirmed_height: ${CYAN}$last_input_hight${NC}"
activesince_out=$(curl -s -m 3 http://$(curl -s ifconfig.me):16127/explorer/zelnodetxs/$payment_address | jq .)
added_height=$((jq -r . | egrep -A10 -w '"ip": ""' | egrep -w 'height' | tail -n1 | awk '{print $2}')  <<< "$activesince_out")

activesince=$(zelcash-cli getblock $added_height | jq -r .time)

 if [[ "$activesince" != "" &&  "$activesince" != "null" ]]; then
   data_now=$(date)
   epotch_now=$(date -d "$data_now" +"%s")
   uptime_secend=$((epotch_now-activesince))
   show_time uptime_secend
   echo -e " ${ARROW} ${NC}Active:${GREEN} $day"d "$hour"h "$min"m "$sec"s"${NC} added_height:${CYAN} $added_height${NC}"
 fi



else

if [[ $((grep -o 'EXPIRED') <<< "$zelnode_status") ||  $((grep -o 'PAYOUT') <<< "$zelnode_status") ]]; then
   last_time=$(zelcash-cli getblock $((last_input_hight+60)) | jq -r .time)
   data_now=$(date)
   epotch_now=$(date -d "$data_now" +"%s")
   uptime_secend=$((epotch_now-last_time))
   show_time uptime_secend

     echo -e " ${ARROW} In expired: ${ORANGE}$((expired_in*-1))${NC} Inactive:${ORANGE} ${day}d ${hour}h ${min}m ${sec}s${NC} "

    if [[ "$last_paid_time" != "N/A" ]]; then

     data_now=$(date)
     epotch_now=$(date -d "$data_now" +"%s")
     uptime_secend=$((epotch_now-last_paid_time))
     show_time uptime_secend


     echo -e " ${ARROW} Last paid:${GREEN} $day"d "$hour"h "$min"m "$sec"s" ${NC}epoch_time: ${RED}$last_paid_time${NC}${NC}"
     echo -e " ${ARROW} Total paid:${ORANGE} $total_paid ${NC}in ${ORANGE}$total_paid_count${NC} transactions"
    else
     echo -e " ${ARROW} Last paid:${ORANGE} $last_paid_time${NC}"
    fi

else


 if [[ "$last_paid_time" != "N/A" ]]; then

     data_now=$(date)
     epotch_now=$(date -d "$data_now" +"%s")
     uptime_secend=$((epotch_now-last_paid_time))
     show_time uptime_secend


     echo -e " ${ARROW} Last paid:${GREEN} $day"d "$hour"h "$min"m "$sec"s" ${NC}epoch_time: ${RED}$last_paid_time${NC}${NC}"
     echo -e " ${ARROW} Balance:${ORANGE} $total_paid ${NC}in ${ORANGE}$total_paid_count${NC} transactions"
    else
     echo -e " ${ARROW} Last paid:${ORANGE} $last_paid_time${NC}"
    fi
fi


fi
 else
  echo -e "${PIN}Zelnode IP: ${ORANGE}N/A${NC} Tier:${SEA} $zelnode_tier${NC} Status: $zelnode_status${NC}"
 fi

if [[ "$arg" == "getzelnodestatus" ]]; then

if [[ "$zelid_status" == "success" ]]; then


if [[ "$zelflux_zelid_getstatus" == "" ]]; then
zelflux_zelid_getstatus="N/A"
fi
echo -e " ${ARROW} ZELID:${ORANGE} $zelflux_zelid_getstatus${NC}"


else
echo -e " ${ARROW} Zelflux:${ORANGE} OFFLINE${NC}"
fi

else

if [[ "$line" == "N/A" ]]; then
echo -e " ${ARROW} Zelflux:${ORANGE} OFFLINE${NC}"
fi

fi

echo
fi




  done
  end=`date +%s`
  runtime=$((end-start))
  echo -e " ${BOOK}Basic:${ORANGE} $basic_count ${NC}Super: ${ORANGE}$super_count ${NC}Bamf: ${ORANGE}$bamf_count ${NC}Total: ${ORANGE}$(($basic_count+$super_count+$bamf_count))${NC}"
  echo -e " ${BOOK}Balance: ${GREEN}$node_total_paid${NC} "
  echo -e " ${BOOK}Total Earnings: ${GREEN}$all_total_erning${NC} Last 31d: ${RED}$all_total_erning_30d${NC} Last 24h: ${RED}$all_total_erning_24h${NC}"
  echo -e " ${BOOK}Total Earnings Basic: ${GREEN}$basic_all_total_erning${NC} Super: ${GREEN}$super_all_total_erning${NC} Bamf: ${GREEN}$bamf_all_total_erning ${NC}"
  echo -e " ${BOOK}24h Earnings Basic: ${GREEN}$basic_all_total_erning_24h${NC} Super: ${GREEN}$super_all_total_erning_24h${NC} Bamf: ${GREEN}$bamf_all_total_erning_24h ${NC}"
  echo -e " ${BOOK}31d Earnings Basic: ${GREEN}$basic_all_total_erning_30d${NC} Super: ${GREEN}$super_all_total_erning_30d${NC} Bamf: ${GREEN}$bamf_all_total_erning_30d ${NC}"
  #echo -e "${BOOK}Found ${RED}$cl${NC} nodes, Runtime ${GREEN}$runtime${NC} sec."
  echo
  }
  exit
fi


if [[ "$arg" == "getzelnodestatus" && "$2" != "" ]]; then

ip_check $2

 if [[ "$zelnode_ip" != "" ]]; then


get_ip_info $zelnode_ip

echo
utxo_output=$(curl -s http://$(curl -s ifconfig.me):16127/explorer/utxo/$payment_address | jq -r .)
total_paid_count=$((jq -r .data[].satoshis | awk '{print $1*0.00000001}' | wc -l | awk '{print $1-1}')  <<< "$utxo_output")

if [[ "$total_paid_count" == "0" ]]; then
total_paid="0"
last_paid_hight=""
else
total_paid=$((jq -r .data[].satoshis | awk '{print $1*0.00000001}' | egrep -w '5.625|9.375|22.5' | awk '{s+=$1} END {print s}') <<< "$utxo_output")
last_paid_hight=$((jq -r .data[].height | tail -n1) <<< "$utxo_output")
fi

  if [[ "$last_paid_hight" != "" ]]; then
   last_paid_time=$(zelcash-cli getblock $last_paid_hight | jq -r .time)
  else
   last_paid_time="N/A"
  fi


  expired_in=$((61-block_from_input))
  echo -e " ${ARROW} IP: $zelnode_ip ${NC}"
  echo -e " ${ARROW} Country: ${ORANGE}$country ${NC}ISP: ${YELLOW}$org ${NC}"
  echo -e " ${ARROW} Tier:${SEA} $zelnode_tier${NC}"
  echo -e " ${ARROW} Status: $zelnode_status${NC}"
if ! [[ $((grep -o 'DOS') <<< "$zelnode_status") ||  $((grep -o 'STARTED') <<< "$zelnode_status") ||  $((grep -o 'EXPIRED') <<< "$zelnode_status") || $((grep -o 'PAYOUT') <<< "$zelnode_status") ]]; then


  if [[ "$last_paid_time" != "N/A" ]]; then

    data_now=$(date)
    epotch_now=$(date -d "$data_now" +"%s")
    uptime_secend=$((epotch_now-last_paid_time))
    show_time uptime_secend


    echo -e " ${ARROW} Last paid:${GREEN} $day"d "$hour"h "$min"m "$sec"s"${NC} epoch_time: ${RED}$last_paid_time${NC}"
    echo -e " ${ARROW} Total paid:${ORANGE} $total_paid ${NC}in ${ORANGE}$total_paid_count${NC} transactions"
  else
   echo -e " ${ARROW} Last paid:${ORANGE} $last_paid_time${NC}"
  fi



 # echo -en " ${ARROW} Last paid:${GREEN} ${day}d ${hour}h ${min}m ${sec} ${CYAN}($last_paid_time)${NC} "

echo -e " ${ARROW} Expire count: ${ORANGE}$expired_in${NC} last_confirmed_height: ${CYAN}$last_input_hight${NC}"
activesince_out=$(curl -s -m 3 http://$(curl -s ifconfig.me):16127/explorer/zelnodetxs/$payment_address | jq .)
added_height=$((jq -r . | egrep -A10 -w '"ip": ""' | egrep -w 'height' | tail -n1 | awk '{print $2}')  <<< "$activesince_out")

activesince=$(zelcash-cli getblock $added_height | jq -r .time)

 if [[ "$activesince" != "" &&  "$activesince" != "null" ]]; then
   data_now=$(date)
   epotch_now=$(date -d "$data_now" +"%s")
   uptime_secend=$((epotch_now-activesince))
   show_time uptime_secend
   echo -e " ${ARROW} ${NC}Active:${GREEN} $day"d "$hour"h "$min"m "$sec"s"${NC} added_height:${CYAN} $added_height${NC}"
 fi



else

if [[ $((grep -o 'EXPIRED') <<< "$zelnode_status") ||  $((grep -o 'PAYOUT') <<< "$zelnode_status") ]]; then
   last_time=$(zelcash-cli getblock $((last_input_hight+60)) | jq -r .time)
   data_now=$(date)
   epotch_now=$(date -d "$data_now" +"%s")
   uptime_secend=$((epotch_now-last_time))
   show_time uptime_secend

     echo -e " ${ARROW} In expired: ${ORANGE}$((expired_in*-1))${NC} Inactive:${ORANGE} ${day}d ${hour}h ${min}m ${sec}s${NC} "

    if [[ "$last_paid_time" != "N/A" ]]; then

     data_now=$(date)
     epotch_now=$(date -d "$data_now" +"%s")
     uptime_secend=$((epotch_now-last_paid_time))
     show_time uptime_secend


     echo -e " ${ARROW} Last paid:${GREEN} $day"d "$hour"h "$min"m "$sec"s" ${NC}epoch_time: ${RED}$last_paid_time${NC}${NC}"
     echo -e " ${ARROW} Total paid:${ORANGE} $total_paid ${NC}in ${ORANGE}$total_paid_count${NC} transactions"
    else
     echo -e " ${ARROW} Last paid:${ORANGE} $last_paid_time${NC}"
    fi

else


 if [[ "$last_paid_time" != "N/A" ]]; then

     data_now=$(date)
     epotch_now=$(date -d "$data_now" +"%s")
     uptime_secend=$((epotch_now-last_paid_time))
     show_time uptime_secend


     echo -e " ${ARROW} Last paid:${GREEN} $day"d "$hour"h "$min"m "$sec"s" ${NC}epoch_time: ${RED}$last_paid_time${NC}${NC}"
     echo -e " ${ARROW} Total paid:${ORANGE} $total_paid ${NC}in ${ORANGE}$total_paid_count${NC} transactions"
    else
     echo -e " ${ARROW} Last paid:${ORANGE} $last_paid_time${NC}"
    fi
fi


fi
 else
  echo -e "${PIN}Zelnode IP: ${ORANGE}N/A${NC} Tier:${SEA} $zelnode_tier${NC} Status: $zelnode_status${NC}"
 fi

if [[ "$arg" == "getzelnodestatus" ]]; then

if [[ "$zelid_status" == "success" ]]; then


if [[ "$zelflux_zelid_getstatus" == "" ]]; then
zelflux_zelid_getstatus="N/A"
fi
echo -e " ${ARROW} ZELID:${ORANGE} $zelflux_zelid_getstatus${NC}"


else
echo -e " ${ARROW} Zelflux:${ORANGE} OFFLINE${NC}"
fi

else

if [[ "$line" == "N/A" ]]; then
echo -e " ${ARROW} Zelflux:${ORANGE} OFFLINE${NC}"
fi

fi


#if [[ "$zelflux_zelid_getstatus" != "" ]]; then
#echo -e " ${ARROW} ZELID:${ORANGE} $zelflux_zelid_getstatus${NC}"
#else
#echo -e " ${ARROW} Zelflux:${ORANGE} OFFLINE${NC}"
#fi



echo
exit
fi

#single_ip=$(egrep -o '([0-9]{1,3}[\.]){3}[0-9]{1,3}' <<< "$1")
#
#if [[ ${#1} > 24 && ${#1} < 35 ]]; then
#sort_by="zelid"
#echo -e "${CLOCK}Checking node by zelid:${GREEN} $1${NC}"
#fi
#
#
#if [[ "$single_ip" != "" ]] ; then
#sort_by="ip"
#echo -e "${CLOCK}Checking node by ip:${GREEN} $1${NC}"
#fi
#
#if [[ ${#1} == "35" ]];then
#sort_by="address"
#echo -e "${CLOCK}Checking node by zel address:${GREEN} $1${NC}"
#fi


start=`date +%s`

if [[ "$arg" == "start_analize" ]]; then
single_ip=$(egrep -o '([0-9]{1,3}[\.]){3}[0-9]{1,3}' <<< "$2")
if [[ ${#2} == "35" ]];then
echo -e "${CLOCK}Checking zel address:${GREEN} $2${NC}"
elif [[ "$single_ip" != "" ]];then
echo -e "${CLOCK}Checking zelnode ip:${GREEN} $2${NC}"
else
echo -e "${BOOK}${CYAN}Usage: ${SEA}$0 ${ORANGE}start_analize <zel_address/zel_ip>${NC}"
echo
exit
fi

get_ip $2




 i=0
  (curl -s http://$(curl -s ifconfig.me):16127/explorer/zelnodetxs/$adress | jq -r .data[] | grep -A8 'Starting' | grep -w 'height' | awk '{print $2}') | { while read line
do
   start_time=$(zelcash-cli getblock $line | jq -r .time)
   data_now=$(date)
   epotch_now=$(date -d "$data_now" +"%s")
   uptime_secend=$((epotch_now-start_time))
   show_time uptime_secend
   i=$((i+1))
   echo -e "${NC}Zelnode IP: ${GREEN}$zelnode_ip${NC} Block height: ${GREEN}$line${NC} Time:${ORANGE} ${day}d ${hour}h ${min}m ${sec}s ago${NC}"
  done
  end=`date +%s`
  runtime=$((end-start))
  echo -e "${BOOK}Found ${RED}$i${NC} events, Runtime ${GREEN}$runtime${NC} sec."

}
echo
exit
fi


if [[ "$arg" == "create_network_ip_list" ]]; then

  sudo rm ~/ip_network_list.json  > /dev/null 2>&1

  zelcash-cli listzelnodes | jq -r .[].ip | egrep -o '([0-9]{1,3}[\.]){3}[0-9]{1,3}' | { while read line
  do
  my_array+=("$line")
  done
  printf '%s\n' "${my_array[@]}" | jq -R . | jq -s . > ip_network_list.json

  ip_added=$(zelcash-cli listzelnodes | jq -r .[].ip | egrep -o '([0-9]{1,3}[\.]){3}[0-9]{1,3}' | wc -l)
  if [[ "$ip_added" == "0" || "$ip_added" == "" ]]; then
   echo -e "${BOOK}No IP found, creating list skipped..."
   echo
   exit
  fi

  if [[ -f ~/ip_network_list.json ]]; then
   echo -e "${BOOK}${CYAN}IP list created, ${GREEN}$ip_added${CYAN} position added.${NC}"
   echo
   exit
  fi
}
exit
fi


if [[ "$arg" == "create_ip_list" ]]; then

  if [[ "$2" == "" ]]; then
   echo -e "${BOOK}${CYAN}Usage: ${SEA}$0 ${ORANGE}create_ip_list <ZELID>${NC}"
   echo
   exit
  fi

  sudo rm ~/ip_list.json > /dev/null 2>&1
  curl -s -m 5 https://api.flux.zel.network/fluxinfo | jq -r .data[]? | egrep -B1 $2 | egrep -o '([0-9]{1,3}[\.]){3}[0-9]{1,3}' | { while read line
  do
  my_array+=("$line")
  done
  printf '%s\n' "${my_array[@]}" | jq -R . | jq -s . > ip_list.json

  ip_added=$(curl -s -m 5 https://api.flux.zel.network/fluxinfo | jq -r .data[]? | egrep -B1 $2 | egrep -o '([0-9]{1,3}[\.]){3}[0-9]{1,3}' | wc -l)

  if [[ "$ip_added" == "0" || "$ip_added" == "" ]]; then
   echo -e "${BOOK}No IP found, creating list skipped..."
   echo
   exit
  fi

  if [[ -f ~/ip_list.json ]]; then
   echo -e "${BOOK}${CYAN}IP list created, ${GREEN}$ip_added${CYAN} position added.${NC}"
   echo
   exit
  fi

}
  exit
fi


if [[ "$arg" == "ip_list" ]]; then

  if ! [[ -f ~/ip_list.json ]]; then
   echo -e "${BOOK}${CYAN}Create first ${GREEN}~/ip_list.json${CYAN} file.${NC}"
   echo
   exit
  fi

  echo -e "${CLOCK}Checking zelnode list form file..."
  jq -r .[] ip_list.json | { while read line
  do
   sort_by="ip"
   check
   nodemsg $filter1 $filter2 $filter3 $filter4
  done
  end=`date +%s`
  runtime=$((end-start))
  echo -e "${BOOK}Found ${RED}$cl${NC} nodes, Runtime ${GREEN}$runtime${NC} sec."
  echo
  }
  exit
fi


if [[ "$arg" == "ip_network_list" ]]; then

  if ! [[ -f ~/ip_network_list.json ]]; then
   echo -e "${BOOK}${CYAN}Create first ${GREEN}~/ip_list.json${CYAN} file.${NC}"
   echo
   exit
  fi

  echo -e "${CLOCK}Checking zelnode network from file..."
  jq -r .[] ip_network_list.json | { while read line
  do
   sort_by="ip"
   check
   nodemsg $filter1 $filter2 $filter3 $filter4
  done
  end=`date +%s`
  runtime=$((end-start))
  echo -e "${BOOK}Found ${RED}$cl${NC} nodes, Runtime ${GREEN}$runtime${NC} sec."
  echo
  }
  exit
fi




if [[ "$single_ip" != "" ]]; then

  sort_by="ip"
  line="$single_ip"
  check
  nodemsg $filter1 $filter2 $filter3 $filter4
  echo
  exit

fi



if [[ "$1" == "-zelid" ]]; then

  if ! [[ ${#2} > 24 && ${#2} < 35 ]]; then
   echo -e "${PIN}Zelnode: ${ORANGE}ZELID is not correct...${NC}"
   echo
   exit
  fi

 # echo -e "${CLOCK}Checking node of zelid:${GREEN} $1${NC}"
  curl -s -m 5 https://api.flux.zel.network/fluxinfo | jq -r .data[]? | egrep -B1 $2 | egrep -o '([0-9]{1,3}[\.]){3}[0-9]{1,3}' | { while read line
  do
  sort_by="ip"
  check
  nodemsg $filter1 $filter2 $filter3 $filter4
  done
  end=`date +%s`
  runtime=$((end-start))
  echo -e "${BOOK}Found ${RED}$cl${NC} nodes, Runtime ${GREEN}$runtime${NC} sec."
  echo
  }

else
  sort_by="ip"
  echo -e "${CLOCK}Checking zelnode network..."
  zelcash-cli viewdeterministiczelnodelist | jq -r .[].ip | { while read line
  do
  check
  nodemsg $filter1 $filter2 $filter3 $filter4
  done
  end=`date +%s`
  runtime=$((end-start))
  echo -e "${BOOK}Found ${RED}$cl${NC} nodes, Runtime ${GREEN}$runtime${NC} sec."
  echo
  }

fi
